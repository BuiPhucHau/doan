import { ChangeDetectionStrategy, Component, ElementRef, Inject, Optional, Self, } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { TuiDestroyService, tuiGetClosestFocusable, tuiPx } from '@taiga-ui/cdk';
import { tuiPositionAccessorFor, TuiRectAccessor, tuiRectAccessorFor, } from '@taiga-ui/core/abstract';
import { tuiDropdownAnimation } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TuiPositionService, TuiVisualViewportService } from '@taiga-ui/core/services';
import { TUI_ANIMATION_OPTIONS, TUI_MODE } from '@taiga-ui/core/tokens';
import { map, takeUntil } from 'rxjs/operators';
import { TuiDropdownDirective } from './dropdown.directive';
import { TuiDropdownHoverDirective } from './dropdown-hover.directive';
import { TUI_DROPDOWN_OPTIONS } from './dropdown-options.directive';
import { TuiDropdownPositionDirective } from './dropdown-position.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/scrollbar";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "@taiga-ui/core/services";
import * as i5 from "rxjs";
import * as i6 from "./dropdown.directive";
import * as i7 from "@taiga-ui/core/abstract";
import * as i8 from "./dropdown-hover.directive";
/**
 * @description:
 * This component is used to show template in a portal
 * using default style of white rounded box with a shadow
 */
export class TuiDropdownComponent {
    constructor(vvs, position$, destroy$, directive, animation, el, accessor, win, mode$, options, hoverDirective) {
        this.directive = directive;
        this.animation = animation;
        this.el = el;
        this.accessor = accessor;
        this.win = win;
        this.mode$ = mode$;
        this.options = options;
        this.hoverDirective = hoverDirective;
        position$
            .pipe(map(point => this.directive.position === 'fixed' ? vvs.correct(point) : point), takeUntil(destroy$))
            .subscribe(([top, left]) => {
            this.update(top, left);
        });
        this.updateWidth(this.accessor.getClientRect().width);
    }
    onHoveredChange(hovered) {
        var _a;
        (_a = this.hoverDirective) === null || _a === void 0 ? void 0 : _a.toggle(hovered);
    }
    onTopFocus() {
        this.moveFocusOutside(true);
    }
    onBottomFocus() {
        this.moveFocusOutside(false);
    }
    update(top, left) {
        var _a;
        const { style } = this.el.nativeElement;
        const { right } = this.el.nativeElement.getBoundingClientRect();
        const { maxHeight, minHeight, offset } = this.options;
        const { innerHeight } = this.win;
        const clientRect = (_a = this.el.nativeElement.offsetParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
        const { position } = this.directive;
        const rect = this.accessor.getClientRect();
        const offsetX = position === 'fixed' ? 0 : -((clientRect === null || clientRect === void 0 ? void 0 : clientRect.left) || 0);
        const offsetY = position === 'fixed' ? 0 : -((clientRect === null || clientRect === void 0 ? void 0 : clientRect.top) || 0);
        top += offsetY;
        left += offsetX;
        const isIntersecting = left < rect.right && right > rect.left && top < offsetY + 2 * offset;
        const available = isIntersecting
            ? rect.top - 2 * offset
            : offsetY + innerHeight - top - offset;
        const sided = right <= rect.left || left >= rect.right;
        style.position = position;
        style.top = tuiPx(Math.max(top, offsetY + offset));
        style.left = tuiPx(left);
        style.maxHeight = sided
            ? `${maxHeight}px`
            : tuiPx(Math.min(maxHeight, Math.max(available, minHeight)));
        style.width = '';
        style.minWidth = '';
        this.updateWidth(rect.width);
    }
    updateWidth(width) {
        const { style } = this.el.nativeElement;
        switch (this.options.limitWidth) {
            case 'min':
                style.minWidth = tuiPx(width);
                break;
            case 'fixed':
                style.width = tuiPx(width);
                break;
            case 'auto':
                break;
        }
    }
    moveFocusOutside(previous) {
        const { nativeElement } = this.directive.el;
        const { ownerDocument } = nativeElement;
        const root = ownerDocument ? ownerDocument.body : nativeElement;
        let focusable = tuiGetClosestFocusable({ initial: nativeElement, root, previous });
        while (focusable !== null && nativeElement.contains(focusable)) {
            focusable = tuiGetClosestFocusable({ initial: focusable, root, previous });
        }
        focusable === null || focusable === void 0 ? void 0 : focusable.focus();
    }
}
TuiDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownComponent, deps: [{ token: TuiVisualViewportService }, { token: TuiPositionService }, { token: TuiDestroyService, self: true }, { token: TuiDropdownDirective }, { token: TUI_ANIMATION_OPTIONS }, { token: ElementRef }, { token: TuiRectAccessor }, { token: WINDOW }, { token: TUI_MODE }, { token: TUI_DROPDOWN_OPTIONS }, { token: TuiDropdownHoverDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownComponent, selector: "tui-dropdown", host: { listeners: { "$.data-mode.attr": "mode$" }, properties: { "@tuiDropdownAnimation": "animation", "attr.data-appearance": "options.appearance" } }, providers: [
        TuiDestroyService,
        TuiPositionService,
        tuiPositionAccessorFor('dropdown', TuiDropdownPositionDirective),
        tuiRectAccessorFor('dropdown', TuiDropdownDirective),
        MODE_PROVIDER,
    ], ngImport: i0, template: "<tui-scrollbar\n    #activeZone=\"tuiActiveZone\"\n    tuiActiveZone\n    tuiOverscroll=\"all\"\n    class=\"t-scroll\"\n    (tuiHoveredChange)=\"onHoveredChange($event)\"\n>\n    <div\n        tabindex=\"0\"\n        (focus)=\"onTopFocus()\"\n    ></div>\n    <div\n        *polymorpheusOutlet=\"directive.content as text; context: {$implicit: activeZone}\"\n        class=\"t-primitive\"\n    >\n        {{ text }}\n    </div>\n    <div\n        tabindex=\"0\"\n        (focus)=\"onBottomFocus()\"\n    ></div>\n</tui-scrollbar>\n", styles: [":host{position:absolute;display:flex;box-shadow:var(--tui-shadow-dropdown);background:var(--tui-elevation-02);border-radius:var(--tui-radius-m);overflow:hidden;border:1px solid var(--tui-base-04);box-sizing:border-box;max-width:calc(100% - 8px);isolation:isolate;pointer-events:auto}:host.ng-animating{pointer-events:none}:host:not([style*=\"top\"]){visibility:hidden}:host[data-mode=onDark]{--tui-text-01: var(--tui-text-01-night);--tui-clear: var(--tui-clear-inverse);background:#222;border:1px solid #808080}.t-scroll{flex-grow:1;max-width:100%}.t-primitive{padding:1rem}\n"], components: [{ type: i1.TuiScrollbarComponent, selector: "tui-scrollbar", inputs: ["hidden"] }], directives: [{ type: i2.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i2.TuiOverscrollDirective, selector: "[tuiOverscroll]", inputs: ["tuiOverscroll"] }, { type: i2.TuiHoveredDirective, selector: "[tuiHoveredChange]", outputs: ["tuiHoveredChange"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiDropdownAnimation], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-dropdown',
                    templateUrl: './dropdown.template.html',
                    styleUrls: ['./dropdown.style.less'],
                    // @bad TODO: OnPush
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    providers: [
                        TuiDestroyService,
                        TuiPositionService,
                        tuiPositionAccessorFor('dropdown', TuiDropdownPositionDirective),
                        tuiRectAccessorFor('dropdown', TuiDropdownDirective),
                        MODE_PROVIDER,
                    ],
                    host: {
                        '[@tuiDropdownAnimation]': 'animation',
                        '[attr.data-appearance]': 'options.appearance',
                        '($.data-mode.attr)': 'mode$',
                    },
                    animations: [tuiDropdownAnimation],
                }]
        }], ctorParameters: function () { return [{ type: i4.TuiVisualViewportService, decorators: [{
                    type: Inject,
                    args: [TuiVisualViewportService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TuiPositionService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i6.TuiDropdownDirective, decorators: [{
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i7.TuiRectAccessor, decorators: [{
                    type: Inject,
                    args: [TuiRectAccessor]
                }] }, { type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DROPDOWN_OPTIONS]
                }] }, { type: i8.TuiDropdownHoverDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownHoverDirective]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,